/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs/promises");
const app = express();

app.use(bodyParser.json());

const getIndexForId = function (id, todosArray) {
	const num = Number(id);
	if (num === NaN) throw new Error(`${id} is not a number`);
	const index = todosArray.map((obj) => Number(obj.id)).indexOf(num);
	if (index === -1) throw new Error(`Todo with ID=${id} does not exist!`);
	return index;
};

const handleError = function (err, res) {
	console.log(`ERROR:${err.message}`);
	res.status(404).send(`ERROR:${err.message}`);
};

const getAllTodos = function (req, res) {
	console.log("\nRoute Get All Hit!");
	fs.readFile("todos.json", { encoding: "utf-8" })
		.then((data) => {
			res.json(JSON.parse(data));
		})
		.catch((err) => handleError(err, res));
};

const getTodo = function (req, res) {
	const id = req.params.id;
	console.log(`\nRoute Get Todo ${id} Hit!`);
	fs.readFile("todos.json", { encoding: "utf-8" })
		.then((data) => {
			todosArray = JSON.parse(data);
			const index = getIndexForId(id, todosArray);
			res.send(todosArray[index]);
		})
		.catch((err) => handleError(err, res));
};

const postTodo = function (req, res) {
	console.log("\nRoute Post Hit!");
	let todo;
	fs.readFile("todos.json", { encoding: "utf-8" })
		.then((data) => {
			todosArray = JSON.parse(data);
			const nextID =
				1 + Math.max(0, ...todosArray.map((obj) => Number(obj.id)));
			todo = {
				id: nextID,
				title: req.body.title ?? "",
				description: req.body.description ?? "",
				completed: req.body.completed ?? false,
			};
			todosArray.push(todo);
			return fs.writeFile(
				"todos.json",
				JSON.stringify(todosArray),
				"utf-8"
			);
		})
		.then((err) => {
			if (err) throw err;
			res.status(201).json(todo);
		})
		.catch((err) => handleError(err, res));
};

const updateTodo = function (req, res) {
	const id = req.params.id;
	console.log(`\nRoute Put Todo ${id} Hit!`);
	let todo;
	fs.readFile("todos.json", { encoding: "utf-8" })
		.then((data) => {
			todosArray = JSON.parse(data);
			const index = getIndexForId(id, todosArray);
			if (req.body.title) todosArray[index].title = req.body.title;
			if (req.body.description)
				todosArray[index].description = req.body.description;
			if (req.body.completed !== undefined)
				todosArray[index].completed = req.body.completed;
			todo = todosArray[index];
			return fs.writeFile(
				"todos.json",
				JSON.stringify(todosArray),
				"utf-8"
			);
		})
		.then((err) => {
			if (err) throw err;
			res.status(200).json(todo);
		})
		.catch((err) => handleError(err, res));
};

const deleteTodo = function (req, res) {
	const id = req.params.id;
	console.log(`\nRoute Delete Todo ${id} Hit!`);

	fs.readFile("todos.json", { encoding: "utf-8" })
		.then((data) => {
			todosArray = JSON.parse(data);
			const index = getIndexForId(id, todosArray);
			todosArray.splice(index, 1);
			return fs.writeFile(
				"todos.json",
				JSON.stringify(todosArray),
				"utf-8"
			);
		})
		.then((err) => {
			if (err) throw err;
			res.status(200).send();
		})
		.catch((err) => handleError(err, res));
};

app.get("/todos", getAllTodos);
app.get("/todos/:id", getTodo);
app.post("/todos", postTodo);
app.put("/todos/:id", updateTodo);
app.delete("/todos/:id", deleteTodo);
app.use((req, res, next) => {
	res.status(404).send();
});
app.listen(3000);

module.exports = app;
